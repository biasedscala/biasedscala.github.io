<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Biased Scala</title>
    <link>https://biasedscala.github.io/</link>
    <description>Recent content on Biased Scala</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Oct 2021 08:47:11 +0100</lastBuildDate><atom:link href="https://biasedscala.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BiasedScala: extension makes a right way</title>
      <link>https://biasedscala.github.io/posts/03-extension-makes-it-right/</link>
      <pubDate>Fri, 15 Oct 2021 08:47:11 +0100</pubDate>
      
      <guid>https://biasedscala.github.io/posts/03-extension-makes-it-right/</guid>
      <description>I get to know extension is via Kotlin, After Scala3, extension comes to scala also. Cheerful, isn&amp;rsquo;t it?
extension is an elegant way to extend types and classes.
I use Commons-Lang3 library a lot to process string things, Let&amp;rsquo;s say, StringUtils.isEmpty(StringUtils.trimToEmpty(..)) or StringUtils.substringBetween(StrinUtils.trimToEmpty(..), .., ..), it&amp;rsquo;s necessary for precaution, but tedious, isn&amp;rsquo;t it? With Scala 3&amp;rsquo;s extension ability, we can make this more natural and elegant:
extension (s:String) { def isEmpty():Boolean = StringUtils.</description>
    </item>
    
    <item>
      <title>BiasedScala: I like Future more than yesterday</title>
      <link>https://biasedscala.github.io/posts/02-i-like-future-more/</link>
      <pubDate>Fri, 15 Oct 2021 08:47:11 +0100</pubDate>
      
      <guid>https://biasedscala.github.io/posts/02-i-like-future-more/</guid>
      <description>Although we have Executor/ExecutorService, even ForkJoinPool, most of the time, I only use Scala&amp;rsquo;s Future instead. Not because others are not excellent or no good, just because I feel natural to use Future.
I had said, if the syntax of a programming language is the taste of it, then I like scala&amp;rsquo;s taste and stick with it. Same same, I like Future style instead of submit(task) or execute(runnable) styles, although the underneath mechanism is almost a same.</description>
    </item>
    
    <item>
      <title>BiasedScala: Why I Chose Scala</title>
      <link>https://biasedscala.github.io/posts/00-why-i-choose-scala/</link>
      <pubDate>Mon, 11 Oct 2021 08:47:11 +0100</pubDate>
      
      <guid>https://biasedscala.github.io/posts/00-why-i-choose-scala/</guid>
      <description>I have been writing Scala code for many years, since sbt 0.11.x days.
I checked a project that I open sourced many years ago when I was working at Alibaba, it tells me that it was 11 years ago.
What time flies&amp;hellip;
In fact, I had tried many programming languages, so choosing Scala as the main programming language brings a lot thoughts and practices.
Pragmatic I set up a big picture for a team that I think I would like to build and work in many years ago:</description>
    </item>
    
    <item>
      <title>Biased Scala: Hello World</title>
      <link>https://biasedscala.github.io/posts/01-helloworld/</link>
      <pubDate>Sun, 10 Oct 2021 08:47:11 +0100</pubDate>
      
      <guid>https://biasedscala.github.io/posts/01-helloworld/</guid>
      <description>Before Scala3, you have to declare a wrapper object for a simple hello world program:
object Main{ def main(args: Array[String]) : Unit = { println(&amp;#34;Hello, World&amp;#34;) } } When Scala3 comes, a great change follows. If we want to delare an entry method to run a program, we only need to annotate any method you want it to be the main with @main annotation, now, our hello world program becomes a simple one-linner:</description>
    </item>
    
    <item>
      <title>Biased Scala之Hello World</title>
      <link>https://biasedscala.github.io/posts/01-helloworld_zh/</link>
      <pubDate>Sun, 10 Oct 2021 08:47:11 +0100</pubDate>
      
      <guid>https://biasedscala.github.io/posts/01-helloworld_zh/</guid>
      <description>Scala3出来之前， 写个简单hello world程序要声明一个object:
object Main{ def main(args: Array[String]) : Unit = { println(&amp;#34;Hello, World&amp;#34;) } } Scala3出来之后，有了一个革命性的改善， 那就是main方法的入口直接用@main标注一下就可以了, hello world即刻变成one-liner:
@main def hello: Unit = println(&amp;#34;Hello world!&amp;#34;) Scala3的编译器会自动生成外围结构，对于程序员来说，那些劳神子本就不应该操心，程序员是计算机语言的用户， 对用户来说，越简单越好，越少敲几次键盘越好。 编译器搞得好，就会把简单留给用户，把复杂留给自己。
再加上Scala3废除了很傻逼的package object，用Scala3写脚本也将成为更加赏心悦目的体验。
当然， Scala2.x也不是说不能写脚本， lihaoyi搞的Ammonite(https://ammonite.io/)也还不错， 但碰上Scala3就遭遇降级了，@main直接冲突，你有我也有，哈
之前用Ammonite写了满满一个workspace.amm（项目），但架不住自己是IDE拉扯大的程序员出身啊， 没有了依赖的自动管理和语法的自动提示，语法再简单，用来写复杂一点儿的脚本也是小痛苦的事情，所以， Scala2.x时代， 囧最终还是宁愿新建一个dirtyWorks项目，IDE里写，IDE里跑， 实在高频的脚本，那咱就编译成jar直接java -jar xyz.jar呗，甚至于想进一步追求性能与迅速可用，那就用GraalVM的native-image编译成native的可执行文件并加到PATH里去run呗！
Anyway，我觉得Scala3里第一个走对了的路就是去除package object，而且还一@main解千愁。</description>
    </item>
    
    <item>
      <title>BiasedScala: 开篇词</title>
      <link>https://biasedscala.github.io/posts/%E5%BC%80%E7%AF%87%E8%AF%8D/</link>
      <pubDate>Sun, 10 Oct 2021 08:47:11 +0100</pubDate>
      
      <guid>https://biasedscala.github.io/posts/%E5%BC%80%E7%AF%87%E8%AF%8D/</guid>
      <description>因为是个人对Scala的观点与使用上的裁剪，所以， 我称之为BiasedScala， 既带有个人偏见的Scala。
BiasedScala专栏将陆续分享出一系列个人在Scala上的一些观点、喜好与实践，本就小众，全做自娱自乐。
国庆节回家， 我妈饭桌上说了一句话我挺喜欢，别人教她用各种新的方法做鱼肉做鸡肉，但所有方法试过之后，还是觉得自己的方法做出来的口味更适合自己。 其实任何事情都是如此，没有试炼过当然没有资格或者没有意义去说这个东西我不喜欢，没兴趣，只有都试过了，才会选择一个适合自己的。
计算机语言就好象给程序员的一道道菜，喜欢吃那一口儿的都有，任何事物都有两面性，Scala也是，所以，我也只是采撷那些符合自己口味的Features为我所用， 终究是一种工具，终究是到达罗马的千万条大路之一，它终究不是目的，不要忘了这一点就行。
我们了解一个语言，除了了解它的哲学，也要了解它的生态，更要了解如何用它更好的达成自己的目标，当然，最好是在动手之前搞清楚，它到底适不适合自己的场景。 工具箱里工具多也有问题，那就是不知道用啥或者来回切换的成本更高，甚至影响效率，所以，大多数时候，我们就是一招鲜吃遍天，只要尽量规避劣势，发挥优势就可以了。</description>
    </item>
    
    <item>
      <title>BiasedScala: Preface</title>
      <link>https://biasedscala.github.io/posts/preface/</link>
      <pubDate>Sun, 10 Oct 2021 08:46:11 +0100</pubDate>
      
      <guid>https://biasedscala.github.io/posts/preface/</guid>
      <description>Since the content of this column is ONLY my own point of view, so the name BiasedScala comes. Prejudices mayb.
Scala community is small, so I don&amp;rsquo;t think this column will become popular, I just would like to write it.
I went back to my hometown on vacation of National Day(China). My mom prepared several dishes for dinner. When we were eating, one of the topics we talked about which is the best way of cooking chicken.</description>
    </item>
    
  </channel>
</rss>
